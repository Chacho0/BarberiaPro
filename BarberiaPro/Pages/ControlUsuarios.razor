@page "/control-usuarios"
@using BarberiaPro.Models
@using BarberiaPro.Services
@inject UsuarioService UsuarioService
@inject EmpleadoService EmpleadoService
@inject CargoService CargoService
@inject NavigationManager Navigation

<h3>Control de Usuarios</h3>

<!-- Botón para agregar usuario -->
<button class="btn btn-primary" @onclick="AbrirModalAgregarUsuario">Agregar Usuario</button>

<!-- Tabla de usuarios -->
<table class="table">
    <thead>
        <tr>
            <th>Nombre</th>
            <th>Correo</th>
            <th>Rol</th>
            <th>Estado</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var usuario in usuarios)
        {
            <tr>
                <td>@usuario.Nombre</td>
                <td>@usuario.Correo</td>
                <td>@usuario.Rol?.TipoRol</td>
                <td>
                    @if (usuario.Rol?.TipoRol == "Empleado" && usuario.Empleado != null)
                    {
                        @(usuario.Empleado.Estado ? "Activo" : "Inactivo")
                    }
                    else
                    {
                        <text>N/A</text>
                    }
                </td>
                <td>
                    <button class="btn btn-warning" @onclick="() => AbrirModalEditarUsuario(usuario)">Editar</button>
                    <button class="btn btn-danger" @onclick="() => EliminarUsuario(usuario.IdUsuario)">Eliminar</button>
                    @if (usuario.Rol?.TipoRol == "Empleado" && usuario.Empleado != null)
                    {
                        <button class="btn @(usuario.Empleado.Estado ? "btn-secondary" : "btn-success")"
                                @onclick="() => CambiarEstadoEmpleado(usuario.Empleado.IdEmpleado, !usuario.Empleado.Estado)">
                            @(usuario.Empleado.Estado ? "Desactivar" : "Activar")
                        </button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Modal para agregar/editar usuario -->
@if (mostrarModalUsuario)
{
    <div class="modal-backdrop">
        <div class="modal-content">
            <h3>@(usuarioSeleccionado.IdUsuario == 0 ? "Agregar Usuario" : "Editar Usuario")</h3>
            <EditForm Model="@usuarioSeleccionado" OnValidSubmit="GuardarUsuario">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label>Nombre:</label>
                    <InputText @bind-Value="usuarioSeleccionado.Nombre" class="form-control" />
                </div>

                <div class="form-group">
                    <label>Correo:</label>
                    <InputText @bind-Value="usuarioSeleccionado.Correo" class="form-control" />
                </div>

                <div class="form-group">
                    <label>Contraseña:</label>
                    <InputText type="password" @bind-Value="usuarioSeleccionado.PassWord" class="form-control" />
                </div>

                <div class="form-group">
                    <label>Rol:</label>
                    <select @bind="usuarioSeleccionado.RolId" class="form-control">
                        <option value="1">Admin</option>
                        <option value="2">Empleado</option>
                        <option value="3">Cliente</option>
                    </select>
                </div>

                @if (usuarioSeleccionado.RolId == 2) // Si el rol es Empleado
                {
                    <div class="form-group">
                        <label>Nombre del Empleado:</label>
                        <InputText @bind-Value="usuarioSeleccionado.Empleado.Nombre" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label>Apellido del Empleado:</label>
                        <InputText @bind-Value="usuarioSeleccionado.Empleado.Apellido" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label>Teléfono del Empleado:</label>
                        <InputText @bind-Value="usuarioSeleccionado.Empleado.Telefono" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label>Cargo del Empleado:</label>
                        <div class="input-group">
                            <select @bind="usuarioSeleccionado.Empleado.IdCargo" class="form-control">
                                @foreach (var cargo in cargos)
                                {
                                    <option value="@cargo.IdCargo">@cargo.DescripcionCargo</option>
                                }
                            </select>
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" @onclick="AbrirModalAgregarCargo">
                                    <i class="fas fa-plus"></i> <!-- Icono de agregar -->
                                </button>
                            </div>
                        </div>
                    </div>
                }

                <button type="submit" class="btn btn-primary">Guardar</button>
                <button type="button" class="btn btn-secondary" @onclick="CerrarModalUsuario">Cerrar</button>
            </EditForm>
        </div>
    </div>
}

<!-- Modal para agregar cargo -->
@if (mostrarModalCargo)
{
    <div class="modal-backdrop">
        <div class="modal-content">
            <h3>Agregar Cargo</h3>
            <EditForm Model="@nuevoCargo" OnValidSubmit="GuardarCargo">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label>Descripción del Cargo:</label>
                    <InputText @bind-Value="nuevoCargo.DescripcionCargo" class="form-control" />
                </div>

                <button type="submit" class="btn btn-primary">Guardar</button>
                <button type="button" class="btn btn-secondary" @onclick="CerrarModalCargo">Cerrar</button>
            </EditForm>
        </div>
    </div>
}

@code {
    private List<Usuario> usuarios = new();
    private List<Cargo> cargos = new();
    private Usuario usuarioSeleccionado = new();
    private Cargo nuevoCargo = new();
    private bool mostrarModalUsuario = false;
    private bool mostrarModalCargo = false;
    private Usuario? usuarioActual;

    protected override async Task OnInitializedAsync()
    {
        // Obtener el usuario actual (para verificar el rol)
        usuarioActual = await UsuarioService.ObtenerUsuarioActualAsync();

        // Cargar la lista de usuarios
        usuarios = await UsuarioService.ObtenerUsuariosAsync();

        // Cargar la lista de cargos
        cargos = await CargoService.ObtenerCargosAsync();
    }

    private void AbrirModalAgregarUsuario()
    {
        usuarioSeleccionado = new Usuario
            {
                Empleado = new Empleado() // Inicializar el empleado si es necesario
            };
        mostrarModalUsuario = true;
    }

    private void AbrirModalEditarUsuario(Usuario usuario)
    {
        usuarioSeleccionado = usuario;
        mostrarModalUsuario = true;
    }

    private void AbrirModalAgregarCargo()
    {
        nuevoCargo = new Cargo();
        mostrarModalCargo = true;
    }

    private async Task GuardarUsuario()
    {
        if (usuarioSeleccionado.IdUsuario == 0)
        {
            // Agregar nuevo usuario
            await UsuarioService.AgregarUsuarioAsync(usuarioSeleccionado);
        }
        else
        {
            // Editar usuario existente
            await UsuarioService.EditarUsuarioAsync(usuarioSeleccionado);
        }

        // Recargar la lista de usuarios
        usuarios = await UsuarioService.ObtenerUsuariosAsync();
        mostrarModalUsuario = false;
    }

    private async Task GuardarCargo()
    {
        await CargoService.AgregarCargoAsync(nuevoCargo);
        cargos = await CargoService.ObtenerCargosAsync(); // Recargar la lista de cargos
        mostrarModalCargo = false;
    }

    private void CerrarModalUsuario()
    {
        mostrarModalUsuario = false;
    }

    private void CerrarModalCargo()
    {
        mostrarModalCargo = false;
    }

    private async Task EliminarUsuario(int idUsuario)
    {
        await UsuarioService.EliminarUsuarioAsync(idUsuario);
        usuarios = await UsuarioService.ObtenerUsuariosAsync();
    }

    private async Task CambiarEstadoEmpleado(int idEmpleado, bool estado)
    {
        await EmpleadoService.CambiarEstadoEmpleadoAsync(idEmpleado, estado);
        usuarios = await UsuarioService.ObtenerUsuariosAsync();
    }
}