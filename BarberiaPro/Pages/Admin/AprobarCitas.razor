@page "/aprobar-citas"
@using BarberiaPro.Models
@using BarberiaPro.Services
@inject CitaService CitaService
@inject NavigationManager Navigation

<div class="aprobar-citas-container">
    <h2>Aprobar Citas</h2>
    <div class="fondo-container">
    </div>
    <!-- Listado de citas pendientes -->
    <div class="citas-pendientes">
        @if (citasPendientes.Any())
        {
            @foreach (var cita in citasPendientes)
            {
                <div class="cita-card">
                    <h4>Cita #@cita.IdCita</h4>
                    <div class="cliente-info">
                        <!-- Mostrar la foto del perfil del cliente -->
                        <img src="@(cita.Usuario?.PerfilCliente?.Foto ?? "Perfiles/Default.jpg")" alt="Foto del Cliente" class="cliente-foto" />
                        <p><strong>Cliente:</strong> @cita.Usuario?.Nombre</p>
                    </div>
                    <p><strong>Empleado:</strong> @cita.Empleado?.Nombre</p>
                    <p><strong>Fecha:</strong> @cita.Fecha.ToShortDateString()</p>
                    <p><strong>Hora:</strong> @cita.Hora</p>
                    <div class="cita-acciones">
                        <button class="btn-aprobar" @onclick="() => AbrirModalAprobarCita(cita)">Aprobar Cita</button>
                    </div>
                </div>
            }
        }
        else
        {
            <p>No hay citas pendientes por el momento.</p>
        }
    </div>

    <!-- Modal para aprobar cita -->
    @if (mostrarModalAprobarCita)
    {
        <div class="modal-backdrop">
            <div class="modal-content">
                <h3>Aprobar Cita #@citaSeleccionada?.IdCita</h3>
                <EditForm Model="@citaSeleccionada" OnValidSubmit="AprobarCita">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label>Fecha:</label>
                        <InputDate @bind-Value="citaSeleccionada.Fecha" class="form-control" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                    </div>

                    <div class="form-group">
                        <label>Hora:</label>
                        <InputSelect @bind-Value="citaSeleccionada.Hora" class="form-control">
                            @for (int hour = 8; hour <= 20; hour++) // Horario de 8 AM a 8 PM
                            {
                                <option value="@($"{hour:D2}:00")">
                                    @($"{(hour % 12 == 0 ? 12 : hour % 12)}:00 {(hour < 12 ? "AM" : "PM")}")
                                </option>
                                <option value="@($"{hour:D2}:30")">
                                    @($"{(hour % 12 == 0 ? 12 : hour % 12)}:30 {(hour < 12 ? "AM" : "PM")}")
                                </option>
                            }
                        </InputSelect>
                    </div>

                    <div class="modal-botones">
                        <button type="submit" class="btn-guardar">Guardar Cambios</button>
                        <button type="button" class="btn-cerrar" @onclick="CerrarModalAprobarCita">Cerrar</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    private List<Cita> citasPendientes = new();
    private Cita? citaSeleccionada;
    private bool mostrarModalAprobarCita = false;

    protected override async Task OnInitializedAsync()
    {
        // Obtener citas pendientes al inicializar la página
        citasPendientes = await CitaService.ObtenerCitasPendientesAsync();
    }

    private void AbrirModalAprobarCita(Cita cita)
    {
        citaSeleccionada = cita;
        mostrarModalAprobarCita = true;
    }

    private void CerrarModalAprobarCita()
    {
        mostrarModalAprobarCita = false;
    }

    private async Task AprobarCita()
    {
        if (citaSeleccionada != null)
        {
            // Validar la hora antes de guardar
            if (!TimeSpan.TryParse(citaSeleccionada.Hora, out _))
            {
                Console.Error.WriteLine("Formato de hora inválido. Use el formato HH:mm.");
                return;
            }

            // Cambiar el estado de la cita a "Aprobada"
            citaSeleccionada.Estado = "Aprobada";

            // Actualizar la cita en la base de datos
            await CitaService.ActualizarCitaAsync(citaSeleccionada);

            // Crear un registro en CitaProcesada
            var citaProcesada = new CitaProcesada
                {
                    IdCita = citaSeleccionada.IdCita,
                    TotalPago = CalcularTotalPago(citaSeleccionada), // Método para calcular el total
                    Point = CalcularPuntos(citaSeleccionada), // Método para calcular puntos (si aplica)
                    EstadoPago = "Pendiente" // Estado inicial del pago
                };

            await CitaService.CrearCitaProcesadaAsync(citaProcesada);

            // Cerrar el modal y recargar la página
            mostrarModalAprobarCita = false;
           
        }
    }

    private decimal CalcularTotalPago(Cita cita)
    {
        // Sumar el precio de todos los servicios asociados a la cita
        return cita.CitaServicios.Sum(cs => cs.Servicio.Precio);
    }

    private int CalcularPuntos(Cita cita)
    {
        // Lógica para calcular puntos (por ejemplo, 1 punto por cada $10 gastados)
        return (int)(CalcularTotalPago(cita) / 10);
    }
}
