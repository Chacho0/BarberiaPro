@page "/aprobar-citas"
@using BarberiaPro.Models
@using BarberiaPro.Services
@inject CitaService CitaService
@inject NavigationManager Navigation

<h3>Aprobar Citas</h3>

<!-- Listado de citas pendientes -->
<div class="citas-container">
    @foreach (var cita in citasPendientes)
    {
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Cita #@cita.IdCita</h5>
                <p class="card-text">Cliente: @cita.Usuario?.Nombre</p>
                <p class="card-text">Empleado: @cita.Empleado?.Nombre</p>
                <p class="card-text">Fecha: @cita.Fecha.ToShortDateString()</p>
                <p class="card-text">Hora: @cita.Hora</p>
                <p class="card-text">Estado: @cita.Estado</p>
                <button class="btn btn-primary" @onclick="() => AbrirModalAprobarCita(cita)">Aprobar Cita</button>
            </div>
        </div>
    }
</div>

<!-- Modal para aprobar cita -->
@if (mostrarModalAprobarCita)
{
    <div class="modal-backdrop">
        <div class="modal-content">
            <h3>Aprobar Cita #@citaSeleccionada?.IdCita</h3>
            <EditForm Model="@citaSeleccionada" OnValidSubmit="AprobarCita">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label>Fecha:</label>
                    <InputDate @bind-Value="citaSeleccionada.Fecha" class="form-control" />
                </div>

                <div class="form-group">
                    <label>Hora:</label>
                    <InputText @bind-Value="citaSeleccionada.Hora" class="form-control" placeholder="HH:mm:tt" />
                </div>

                <button type="submit" class="btn-guardar">Guardar Cambios</button>
                <button type="button" class="btn-cerrar" @onclick="CerrarModalAprobarCita">Cerrar</button>
            </EditForm>
        </div>
    </div>
}

@code {
    private List<Cita> citasPendientes = new();
    private Cita? citaSeleccionada;
    private bool mostrarModalAprobarCita = false;

    protected override async Task OnInitializedAsync()
    {
        // Obtener citas pendientes al inicializar la página
        citasPendientes = await CitaService.ObtenerCitasPendientesAsync();
    }

    private void AbrirModalAprobarCita(Cita cita)
    {
        citaSeleccionada = cita;
        mostrarModalAprobarCita = true;
    }

    private void CerrarModalAprobarCita()
    {
        mostrarModalAprobarCita = false;
    }

    private async Task AprobarCita()
    {
        if (citaSeleccionada != null)
        {
            // Validar la hora antes de guardar
            if (!TimeSpan.TryParse(citaSeleccionada.Hora, out _))
            {
                Console.Error.WriteLine("Formato de hora inválido. Use el formato HH:mm.");
                return;
            }

            // Cambiar el estado de la cita a "Aprobada"
            citaSeleccionada.Estado = "Aprobada";

            // Actualizar la cita en la base de datos
            await CitaService.ActualizarCitaAsync(citaSeleccionada);

            // Cerrar el modal y recargar la página
            mostrarModalAprobarCita = false;
            Navigation.NavigateTo("/aprobar-citas", forceLoad: true);
        }
    }
}