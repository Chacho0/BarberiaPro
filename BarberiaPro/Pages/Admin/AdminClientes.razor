@page "/admin-clientes"
@using BarberiaPro.Models
@using BarberiaPro.Services
@using static CitaService
@inject CitaService CitaService
@inject IJSRuntime JSRuntime
@using QuestPDF.Fluent; 
@using QuestPDF.Helpers; 
@using QuestPDF.Infrastructure; 
@using System.Reflection;
@using Microsoft.AspNetCore.Hosting; 
@using Microsoft.Extensions.Hosting;
@inject IWebHostEnvironment Environment
@using System.IO;
<h2>Administrar Clientes</h2>
<div class="content-container">
    <!-- Filtros -->
    <div class="filtros">
        <input type="text" @bind="filtroNombre" placeholder="Buscar por nombre" />
        <select @bind="filtroMes">
            <option value="">Todos los meses</option>
            @for (int i = 1; i <= 12; i++)
            {
                <option value="@i">@i</option>
            }
        </select>
        <select @bind="filtroAño">
            <option value="">Todos los años</option>
            @for (int i = DateTime.Now.Year - 5; i <= DateTime.Now.Year; i++)
            {
                <option value="@i">@i</option>
            }
        </select>
        <select @bind="filtroEstadoPago">
            <option value="">Todos</option>
            <option value="Pendiente">Pendientes por pagar</option>
            <option value="Pagado">Clientes Pagos</option>
            <option value="Revisión">En Revision</option>
        </select>
        <button @onclick="FiltrarClientes">Filtrar</button>
    </div>

    <!-- Botón para generar el reporte en PDF -->
    <button @onclick="GenerarReportePdf" class="btn-reporte">Generar Reporte PDF</button>

    <!-- Listado de clientes -->
    <table class="table">
        <thead>
            <tr>
                <th>Nombre del Cliente</th>
                <th>Estado de Pago</th>
                <th>Fecha de Cita</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cliente in clientesFiltrados)
            {
                <tr>
                    <td>@cliente.NombreCliente</td>
                    <td>@cliente.EstadoPago</td>
                    <td>@cliente.FechaCita.ToShortDateString()</td>
                    <td>
                        <button class="btn-ver-info" @onclick="() => AbrirModalVerInfo(cliente)">Ver Información</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<!-- Modal para ver información del cliente -->
@if (mostrarModalVerInfo)
{
    <div class="modal-backdrop">
        <div class="modal-content">
            <h3>Información del Cliente</h3>
            <div class="info-cliente">
                <div class="form-group">
                    <label>Nombre del Cliente:</label>
                    <input type="text" value="@clienteSeleccionado?.NombreCliente" readonly class="form-control" />
                </div>
                <div class="form-group">
                    <label>Número de Referencia:</label>
                    <input type="text" value="@clienteSeleccionado?.NumeroTransferencia" readonly class="form-control" />
                </div>
                <div class="form-group">
                    <label>Voucher:</label>
                    @if (!string.IsNullOrEmpty(clienteSeleccionado?.VoucherPath))
                    {
                        <img src="@clienteSeleccionado.VoucherPath" alt="Voucher" class="voucher-imagen" />
                    }
                    else
                    {
                        <p>No se ha subido un voucher.</p>
                    }
                </div>
                <div class="form-group">
                    <label>Observación:</label>
                    <textarea readonly class="form-control">@clienteSeleccionado?.Observacion</textarea>
                </div>
            </div>
            <div class="modal-acciones">
                @if (clienteSeleccionado?.EstadoPago != "Pagado")
                {
                    <button class="btn-aprobar" @onclick="AprobarCliente">Aprobar</button>
                    <button class="btn-no-aprobar" @onclick="NoAprobarCliente">No Aprobar</button>
                }
                <button class="btn-cerrar" @onclick="CerrarModalVerInfo">Cerrar</button>
            </div>
        </div>
    </div>
}
<script src="/Perfiles/site.js"></script>
@code {
    private List<ClientePagoInfo> clientes = new();
    private List<ClientePagoInfo> clientesFiltrados = new();
    private bool mostrarModalVerInfo = false;
    private ClientePagoInfo? clienteSeleccionado;
    private string filtroNombre = string.Empty;
    private int? filtroMes = null;
    private int? filtroAño = null;
    private string filtroEstadoPago = string.Empty; // Filtro por estado de pago
   
    protected override async Task OnInitializedAsync()
    {
        // Obtener todos los clientes con su estado de pago
        clientes = await CitaService.ObtenerClientesConEstadoPagoAsync();
        clientesFiltrados = clientes;
    }

    private void FiltrarClientes()
    {
        // Aplicar filtros
        clientesFiltrados = clientes
            .Where(c => string.IsNullOrEmpty(filtroNombre) || c.NombreCliente.Contains(filtroNombre, StringComparison.OrdinalIgnoreCase))
            .Where(c => !filtroMes.HasValue || c.FechaCita.Month == filtroMes)
            .Where(c => !filtroAño.HasValue || c.FechaCita.Year == filtroAño)
            .Where(c => string.IsNullOrEmpty(filtroEstadoPago) || c.EstadoPago == filtroEstadoPago)
            .ToList();
    }

    private async Task GenerarReportePdf()
    {
        var pdfBytes = await GenerarPdfAsync();

        // Convertir en base64 para que JavaScript pueda procesarlo
        var base64String = Convert.ToBase64String(pdfBytes);

        // Invocar JavaScript para forzar la descarga
        await JSRuntime.InvokeVoidAsync("descargarArchivo", base64String, "Reporte.pdf");
    }

    private async Task<byte[]> GenerarPdfAsync()
    {
        byte[] logoBytes;

        // Obtén la ruta completa al archivo de imagen
        var imagePath = Path.Combine(Environment.WebRootPath, "Perfiles", "Logos.jpeg");

        // Intenta leer la imagen
        try
        {
            logoBytes = await File.ReadAllBytesAsync(imagePath);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al leer la imagen: {ex.Message}");
            // Manejar el error aquí (por ejemplo, mostrar una imagen de marcador de posición)
            return null; // O lanza una excepción, dependiendo de tu lógica
        }

        var document = Document.Create(container =>
        {
            container.Page(page =>
            {
                page.Size(PageSizes.A4);
                page.Margin(2, Unit.Centimetre);
                page.PageColor(Colors.White);
                page.DefaultTextStyle(x => x.FontSize(12));

                page.Header()
                    .Row(row =>
                    {
                        // Columna para el logo (usando MemoryStream)
                        if (logoBytes != null) // Verifica si la imagen se cargó correctamente
                        {
                            using (var stream = new MemoryStream(logoBytes))
                            {
                                row.RelativeItem(1).Image(stream);
                            }
                        }
                        else
                        {
                            // Si no se pudo cargar la imagen, mostrar un placeholder o dejar la columna vacía
                            row.RelativeItem(1).Text("Logo no disponible");
                        }

                        // Columna para el título, tipo de reporte y fecha
                        row.RelativeItem(3)
                            .Column(column =>
                            {
                                column.Item().AlignCenter().Text("Reporte de Pagos").Bold().FontSize(18);
                                column.Item().AlignCenter().Text($"Tipo: {ObtenerTipoReporte()}").FontSize(14);
                                column.Item().AlignCenter().Text($"Fecha: {DateTime.Now.ToShortDateString()}").FontSize(12);
                            });
                    });

                page.Content()
                    .PaddingVertical(1, Unit.Centimetre)
                    .Table(table =>
                    {
                        // Definición de columnas con ancho relativo
                        table.ColumnsDefinition(columns =>
                        {
                            columns.RelativeColumn(3); // Nombre del Cliente
                            columns.RelativeColumn(2); // Estado de Pago
                            columns.RelativeColumn(2); // Fecha de Cita
                        });

                        // Estilo para el encabezado
                        table.Header(header =>
                        {
                            header.Cell().Background(Colors.Grey.Lighten2).Border(1).BorderColor(Colors.Black).Padding(5).Text("Nombre del Cliente").Bold().FontSize(13);
                            header.Cell().Background(Colors.Grey.Lighten2).Border(1).BorderColor(Colors.Black).Padding(5).Text("Estado de Pago").Bold().FontSize(13);
                            header.Cell().Background(Colors.Grey.Lighten2).Border(1).BorderColor(Colors.Black).Padding(5).Text("Fecha de Cita").Bold().FontSize(13);
                        });

                        // Datos de la tabla
                        foreach (var cliente in clientesFiltrados)
                        {
                            table.Cell().Border(1).BorderColor(Colors.Grey.Darken1).Background(clientesFiltrados.IndexOf(cliente) % 2 == 0 ? Colors.White : Colors.Grey.Lighten5).Padding(5).Text(cliente.NombreCliente);
                            table.Cell().Border(1).BorderColor(Colors.Grey.Darken1).Background(clientesFiltrados.IndexOf(cliente) % 2 == 0 ? Colors.White : Colors.Grey.Lighten5).Padding(5).Text(cliente.EstadoPago).FontColor(cliente.EstadoPago == "Pendiente" ? Colors.Red.Medium : Colors.Green.Medium);
                            table.Cell().Border(1).BorderColor(Colors.Grey.Darken1).Background(clientesFiltrados.IndexOf(cliente) % 2 == 0 ? Colors.White : Colors.Grey.Lighten5).Padding(5).Text(cliente.FechaCita.ToShortDateString());
                        }
                    });

                page.Footer()
                    .AlignCenter()
                    .Text(x =>
                    {
                        x.Span("Página ");
                        x.CurrentPageNumber();
                        x.Span(" de ");
                        x.TotalPages();
                    });
            });
        });

        var pdfBytes = document.GeneratePdf();

        return pdfBytes;
    }
    
    private string ObtenerTipoReporte()
    {
        return string.IsNullOrEmpty(filtroEstadoPago) ? "Reporte de Pagos" :
               filtroEstadoPago == "Pendiente" ? "Pendientes por pagar" :
               "Clientes Pagos";
    }
    
    private void AbrirModalVerInfo(ClientePagoInfo cliente)
    {
        clienteSeleccionado = cliente;
        mostrarModalVerInfo = true;
    }

    private void CerrarModalVerInfo()
    {
        mostrarModalVerInfo = false;
        clienteSeleccionado = null;
    }

    private async Task AprobarCliente()
    {
        if (clienteSeleccionado != null)
        {
            var citaProcesada = await CitaService.ObtenerCitaProcesadaPorClienteAsync(clienteSeleccionado.NombreCliente);

            if (citaProcesada != null)
            {
                citaProcesada.EstadoPago = "Pagado";
                await CitaService.ActualizarCitaProcesadaAsync(citaProcesada);
                Console.WriteLine($"Cliente {clienteSeleccionado.NombreCliente} aprobado.");
            }
            else
            {
                Console.WriteLine("No se encontró la cita procesada del cliente.");
            }

            CerrarModalVerInfo();
            await ActualizarListaClientes();
        }
    }

    private async Task NoAprobarCliente()
    {
        if (clienteSeleccionado != null)
        {
            var citaProcesada = await CitaService.ObtenerCitaProcesadaPorClienteAsync(clienteSeleccionado.NombreCliente);

            if (citaProcesada != null)
            {
                citaProcesada.EstadoPago = "Pendiente";
                await CitaService.ActualizarCitaProcesadaAsync(citaProcesada);
                Console.WriteLine($"Cliente {clienteSeleccionado.NombreCliente} no aprobado.");
            }
            else
            {
                Console.WriteLine("No se encontró la cita procesada del cliente.");
            }

            CerrarModalVerInfo();
            await ActualizarListaClientes();
        }
    }

    private async Task ActualizarListaClientes()
    {
        clientes = await CitaService.ObtenerClientesConEstadoPagoAsync();
        FiltrarClientes();
    }
}